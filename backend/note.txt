       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
       ‚îÇ     User      ‚îÇ
       ‚îÇ (tr√¨nh duy·ªát) ‚îÇ
       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ HTTP Request
               ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ     WAF       ‚îÇ
        ‚îÇ   (waf.py)    ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
     - N·∫øu match rule trong rules.json ‚Üí block (403) v√† log l·∫°i v√†o logs/waf.log.
     - N·∫øu kh√¥ng match ‚Üí forward ƒë·∫øn backend_app.py (port 5001).

                ‚îÇ
                ‚ñº
         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
         ‚îÇ Demo Backend  ‚îÇ
         ‚îÇ (backend_app) ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                ‚îÇ
                ‚ñº
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ   Response    ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò


   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
   ‚îÇ                    Admin Side (port 5002)                 ‚îÇ
   ‚îÇ                                                           ‚îÇ
   ‚îÇ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ
   ‚îÇ   ‚îÇ   Admin UI    ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Admin API    ‚îÇ               ‚îÇ
   ‚îÇ   ‚îÇ (React/HTML)  ‚îÇ       ‚îÇ (admin_api.py)‚îÇ               ‚îÇ
   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ
   ‚îÇ                                   ‚îÇ                       ‚îÇ
   ‚îÇ     GET/POST /rules               ‚îÇ  POST /analyze        ‚îÇ
   ‚îÇ     GET /logs                     ‚ñº                       ‚îÇ
   ‚îÇ                              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê            ‚îÇ
   ‚îÇ                              ‚îÇ   Analyzer    ‚îÇ            ‚îÇ
   ‚îÇ                              ‚îÇ (analyzer.py) ‚îÇ            ‚îÇ
   ‚îÇ                              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò            ‚îÇ
   ‚îÇ                                      ‚îÇ                    ‚îÇ
   ‚îÇ                                 Update rules.json         ‚îÇ
   ‚îÇ                                 (t·ª± ƒë·ªông sinh regex)      ‚îÇ
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üîë Gi·∫£i th√≠ch flow:

1. User g·ª≠i request ‚Üí ƒëi qua waf.py.
- N·∫øu match rule trong rules.json ‚Üí block (403) v√† log l·∫°i.
- N·∫øu kh√¥ng match ‚Üí forward ƒë·∫øn backend_app.py (port 5001).

2. WAF log l∆∞u v√†o logs/waf.log.

3. Admin API (5002) cho Admin UI g·ªçi:
- /rules: xem / th√™m / x√≥a rule.
- /logs: xem log m·ªõi nh·∫•t.
- /analyze: trigger analyzer ƒë·ªçc log v√† c·∫≠p nh·∫≠t rules.json.

4. Analyzer.py ƒë·ªçc log, t√¨m pattern t·∫•n c√¥ng ‚Üí sinh regex rule m·ªõi ‚Üí append v√†o rules.json.




--------------------------------------
C√°ch ch·∫°y (local, trong PyCharm)

Backend

1. T·∫°o virtualenv v√† c√†i dependency (v√≠ d·ª• trong backend/):

python -m venv venv
venv\Scripts\activate -> k√≠ch ho·∫°t v√†o ch·∫ø ƒë·ªô virtual environment (venv) c·ªßa Python. Tho√°t venv: deactivate
pip install -r requirements.txt
# n·∫øu b·∫°n ch∆∞a c√≥, requirements.txt v√≠ d·ª•:
# flask
# flask-cors


2. Ch·∫°y admin_api.py:

python admin_api.py

=> Admin API l·∫Øng nghe http://127.0.0.1:5002.


3. Ch·∫°y backend_app.py (port 5001) v√† waf.py (port 5000) nh∆∞ b·∫°n ƒë√£ c√≥:

python backend_app.py
python waf.py


Trong PyCharm:

B·∫°n c√≥ th·ªÉ t·∫°o 2 (ho·∫∑c 3) Run Configurations ki·ªÉu "Python" ƒë·ªÉ ch·∫°y backend_app.py, waf.py, admin_api.py. PyCharm t√≠ch h·ª£p virtualenv; ch·ªçn interpreter l√† venv c·ªßa project. Ch·∫°y t·ª´ng config trong c√°c tab run kh√°c nhau.




C√°c pattern m·∫´u ƒë·ªÉ th·ª≠:
,
  {
    "id": 11,
    "type": "CRLF_INJECTION",
    "pattern": "(?:%0d%0a|\\r\\n).*(?:Content-Type:|Set-Cookie:|Location:)",
    "enabled": true,
    "source": "seed",
    "comment": "Ph√°t hi·ªán CRLF + header injection (v√≠ d·ª• ch√®n 'Set-Cookie' ho·∫∑c 'Location'). B·∫Øt c·∫£ d·∫°ng encode (%0d%0a)."
  },
  {
    "id": 12,
    "type": "XPATH_LDAP_INJECTION",
    "pattern": "(?:\\b(xpath|ldap)\\b|filter=\\(|\\[\\*\\])",
    "enabled": false,
    "source": "seed",
    "comment": "Pattern g·ª£i √Ω XPath/LDAP injection vectors. D√πng ƒë·ªÉ log/alert n·∫øu app d√πng XML/LDAP queries; d·ªÖ FP, b·∫≠t th·∫≠n tr·ªçng."
  },
  {
    "id": 13,
    "type": "SUSPICIOUS_LONG_TOKEN",
    "pattern": "[A-Za-z0-9\\-_]{80,}",
    "enabled": false,
    "source": "seed",
    "comment": "Chu·ªói d√†i k√Ω t·ª± alphanumeric (>=80) c√≥ th·ªÉ l√† payload m√£ h√≥a / token / shellcode ‚Äî ch·ªâ log v√¨ d·ªÖ FP (v√≠ d·ª• long tokens)."
  },
  {
    "id": 14,
    "type": "SQL_COMMENT_OBFUSCATION",
    "pattern": "(?:/\\*.*?\\*/)",
    "enabled": false,
    "source": "seed",
    "comment": "Ph√°t hi·ªán SQL comment obfuscation (/*...*/), k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ ch√®n comment ƒë·ªÉ n√© m·ªôt s·ªë b·ªô l·ªçc. D√πng ƒë·ªÉ log/analyze."
  },
  {
    "id": 15,
    "type": "SUSPICIOUS_FILE_EXT",
    "pattern": "(?:\\.phps?|\\.phtml|\\.jsp|\\.asp[x]?)$",
    "enabled": true,
    "source": "seed",
    "comment": "Ch·∫∑n upload ho·∫∑c access ƒë·∫øn file v·ªõi extension th·ª±c thi server-side (php, phtml, jsp, asp) ‚Äî c√≥ th·ªÉ ngƒÉn ng∆∞·ªùi upload code."
  },
  {
    "id": 16,
    "type": "regex",
    "pattern": "([;&|]{1,2}\\s*(cat|ls|whoami|id|rm)\\b)",
    "enabled": true,
    "source": "seed",
    "comment": "Ph√°t hi·ªán Command Injection ‚Äî khi ng∆∞·ªùi d√πng c·ªë g·∫Øng th·ª±c thi l·ªánh h·ªá th·ªëng."
  },
  {
    "id": 17,
    "type": "XSS_ATTACK",
    "pattern": "<script.*?>.*?</script>",
    "enabled": true,
    "source": "analyzer",
    "comment": "Ph√°t hi·ªán ƒëo·∫°n m√£ XSS ch·ª©a th·∫ª <script>."
  }


  12/10/2025
  ƒê·ªÅ ch·∫°y demo_attacks.ps1, nh·∫≠p c√°c l·ªánh:
- Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
- ./demo_attacks.ps1

[PowerShell Script demo_attacks.ps1]
        ‚îÇ
        ‚ñº
G·ª≠i request th·ª≠ nghi·ªám (XSS, SQLi, CRLF...) ‚Üí http://127.0.0.1:5000
        ‚îÇ
        ‚ñº
 [waf.py]  ‚Äî Web Application Firewall
     ‚îú‚îÄ ƒê·ªçc rules.json
     ‚îú‚îÄ Ki·ªÉm tra pattern + heuristic
     ‚îú‚îÄ N·∫øu kh·ªõp ‚Üí BLOCK + ghi log JSON (waf.log)
     ‚îî‚îÄ N·∫øu h·ª£p l·ªá ‚Üí chuy·ªÉn ti·∫øp request t·ªõi backend_app.py
        ‚îÇ
        ‚ñº
 [backend_app.py] ‚Äî Flask demo app (gi·∫£ l·∫≠p web b√°n ƒëi·ªán tho·∫°i)
     ‚îú‚îÄ /search?q=... ‚Üí render HTML k·∫øt qu·∫£
     ‚îî‚îÄ /login ‚Üí nh·∫≠n form ƒëƒÉng nh·∫≠p demo
        ‚îÇ
        ‚ñº
 [admin_api.py] ‚Äî REST API qu·∫£n tr·ªã
     ‚îú‚îÄ /api/rules ‚Üí xem rule hi·ªán c√≥
     ‚îú‚îÄ /api/analyze ‚Üí ch·∫°y analyzer.py sinh rule t·ª± ƒë·ªông
     ‚îî‚îÄ /api/logs ‚Üí ƒë·ªçc waf.log (PowerShell script g·ªçi ƒë·ªÉ xem log)



     13/10/2025(tuandat):
     1) V√¨ sao analyzer kh√¥ng t·∫°o rule

Analyzer ch·ªâ xem c√°c d√≤ng JSON BLOCKED trong logs/waf.log. N·∫øu WAF kh√¥ng block payload th√¨ analyzer kh√¥ng bi·∫øt payload ƒë√≥ l√† attack.

Trong log b·∫°n paste, nhi·ªÅu request l√† ALLOWED (v√≠ d·ª• '/ OR '1'='1 b·ªã ALLOWED), v√¨:

WAF ch·ªâ c√≥ seed rule b·∫Øt UNION SELECT (id 3) v√† m·ªôt s·ªë pattern kh√°c; boolean tautology ki·ªÉu ' OR '1'='1 rule t∆∞∆°ng ·ª©ng (id 4) c√≥ enabled: false theo file rules m·∫´u c·ªßa b·∫°n ‚Üí WAF kh√¥ng ch·∫∑n.

Ho·∫∑c heuristic detect trong waf.py kh√¥ng c√≥ pattern c·ª• th·ªÉ cho payload b·∫°n g·ª≠i.

Th√™m n·ªØa: ng∆∞·ª°ng IP (THRESHOLD_IPS=2) ch·∫∑n vi·ªác t·∫°o rule khi t·∫•t c·∫£ request ƒë·∫øn t·ª´ m·ªôt IP duy nh·∫•t (localhost) ‚Äî h·ª£p l√Ω cho production nh∆∞ng kh√≥ demo tr√™n m√°y dev.

K·∫øt qu·∫£: analyzer kh√¥ng th·∫•y ƒë·ªß (count, distinct IP) tr√™n m·ªôt matched_rule.pattern ‚Üí kh√¥ng th√™m rule.

2) Code analyzer.py ch·ªânh s·∫µn cho demo

T√¥i chu·∫©n b·ªã file analyzer.py ho√†n ch·ªânh (thay th·∫ø file hi·ªán t·∫°i) c√≥:

DEMO_MODE = True b·∫≠t c·∫•u h√¨nh demo: THRESHOLD_OCCURRENCES=2, THRESHOLD_IPS=1 (d·ªÖ t·∫°o rule khi test c·ª•c b·ªô).

V·∫´n gi·ªØ c·∫•u tr√∫c an to√†n: ch·ªâ l·∫•y entries event=="BLOCKED"; b·ªè qua log kh√¥ng ph·∫£i JSON.

In r√µ rules m·ªõi th√™m.

Thay file analyzer.py b·∫±ng n·ªôi dung n√†y:

# analyzer.py
import json, os
from datetime import datetime

LOG_FILE = "logs/waf.log"
RULES_FILE = "rules.json"

# Demo / production switches
DEMO_MODE = True

if DEMO_MODE:
    THRESHOLD_OCCURRENCES = 2   # demo: ch·ªâ c·∫ßn 2 l·∫ßn
    THRESHOLD_IPS = 1           # demo: 1 IP l√† ƒë·ªß
else:
    THRESHOLD_OCCURRENCES = 3   # production example
    THRESHOLD_IPS = 2

AUTO_ENABLE = True  # n·∫øu True -> t·ª± b·∫≠t rule (demo). Trong prod c√≥ th·ªÉ False (require review).

def analyze_logs():
    if not os.path.exists(LOG_FILE):
        print("‚ö†Ô∏è Kh√¥ng c√≥ log ƒë·ªÉ ph√¢n t√≠ch.")
        return

    # ƒë·ªçc t·ª´ng d√≤ng JSON trong log (m·ªói d√≤ng json l√† 1 entry)
    lines = []
    with open(LOG_FILE, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            # ch·ªâ parse c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng '{' (ch·ªâ JSON structured logs)
            if line.startswith("{"):
                try:
                    obj = json.loads(line)
                    lines.append(obj)
                except Exception as e:
                    # c√≥ th·ªÉ c√≥ human-readable log lines mixed in -> b·ªè qua
                    print(f"B·ªè qua log kh√¥ng parse ƒë∆∞·ª£c: {e}")

    # th·ªëng k√™: key = (type, pattern) -> count + set(ips)
    stats = {}
    for entry in lines:
        if entry.get("event") != "BLOCKED":
            continue
        rule = entry.get("matched_rule", {})
        ptype = rule.get("type")
        patt = rule.get("pattern")
        if not ptype or not patt:
            continue
        key = (ptype, patt)
        if key not in stats:
            stats[key] = {"count": 0, "ips": set()}
        stats[key]["count"] += 1
        if entry.get("src_ip"):
            stats[key]["ips"].add(entry.get("src_ip"))

    # ƒë·ªçc rules hi·ªán c√≥
    if os.path.exists(RULES_FILE):
        try:
            with open(RULES_FILE, "r", encoding="utf-8") as f:
                rules = json.load(f)
        except Exception:
            rules = []
    else:
        rules = []

    existing = {(r.get("type"), r.get("pattern")) for r in rules if "type" in r and "pattern" in r}
    next_id = max((r.get("id", 0) for r in rules), default=0) + 1

    new_rules = []
    for (ptype, patt), data in stats.items():
        if (ptype, patt) in existing:
            continue
        if data["count"] >= THRESHOLD_OCCURRENCES and len(data["ips"]) >= THRESHOLD_IPS:
            new_rule = {
                "id": next_id,
                "type": ptype,
                "pattern": patt,
                "enabled": AUTO_ENABLE,
                "source": "auto_analyzer",
                "comment": f"T·ª± sinh t·ª´ logs ({data['count']} l·∫ßn / {len(data['ips'])} IP)"
            }
            new_rules.append(new_rule)
            next_id += 1

    if new_rules:
        rules.extend(new_rules)
        with open(RULES_FILE, "w", encoding="utf-8") as f:
            json.dump(rules, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ ƒê√£ th√™m {len(new_rules)} rule m·ªõi v√†o {RULES_FILE}:")
        for r in new_rules:
            print(f"   - id={r['id']} type={r['type']} pattern={r['pattern']}")
    else:
        print("Kh√¥ng c√≥ rule m·ªõi ƒë·∫°t ng∆∞·ª°ng.")

if __name__ == "__main__":
    analyze_logs()


L∆∞u √Ω: b·∫≠t DEMO_MODE = False khi b·∫°n v·ªÅ m√¥i tr∆∞·ªùng th·ª±c. AUTO_ENABLE=True gi√∫p demo d·ªÖ th·∫•y t√°c d·ª•ng t·ª± ƒë·ªông, nh∆∞ng trong production n√™n AUTO_ENABLE=False (admin review).

3) C√°c l·ªánh test ‚Äî b∆∞·ªõc-by-step (ƒë·ªÉ analyzer t·∫°o rule)

Ph·∫ßn n√†y gi·∫£ s·ª≠ b·∫°n ƒë√£:

waf.py ƒëang ch·∫°y (port 5000),

backend_app.py ƒëang ch·∫°y (port 5001),

admin_api.py ƒëang ch·∫°y (port 5002),

b·∫°n ƒë√£ thay analyzer.py b·∫±ng file demo tr√™n.

B∆∞·ªõc A ‚Äî l√†m cho WAF block payloads

(ƒë·ªÉ analyzer th·∫•y BLOCKED entries)

Ch·∫°y payloads b·ªã WAF ch·∫∑n (d√πng UNION SELECT v√¨ rules m·∫´u c·ªßa b·∫°n c√≥ rule b·∫Øt union select):

PowerShell (ch·∫°y 3 l·∫ßn):

Invoke-WebRequest -Uri "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users" -UseBasicParsing
Invoke-WebRequest -Uri "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users" -UseBasicParsing
Invoke-WebRequest -Uri "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users" -UseBasicParsing


(curl):

curl -s "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users"
curl -s "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users"
curl -s "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users"


N·∫øu WAF tr·∫£ 403 cho URL n√†y th√¨ ƒë√£ block ‚Üí check logs/waf.log b·∫°n s·∫Ω c√≥ 3 m·ª•c BLOCKED cho pattern t∆∞∆°ng ·ª©ng.

B∆∞·ªõc B ‚Äî ch·∫°y analyzer

T·ª´ th∆∞ m·ª•c backend:

python analyzer.py


B·∫°n s·∫Ω th·∫•y output ki·ªÉu:

‚úÖ ƒê√£ th√™m 1 rule m·ªõi v√†o rules.json:
   - id=18 type=SQLi pattern=(?:union\s+select\b)

B∆∞·ªõc C ‚Äî x√°c minh rules.json v√† WAF

M·ªü rules.json ƒë·ªÉ xem rule m·ªõi c√≥ enabled: true (v√¨ AUTO_ENABLE=True tr√™n demo).

L·∫∑p l·∫°i request t∆∞∆°ng t·ª±, WAF s·∫Ω ch·∫∑n theo rule m·ªõi (n·∫øu tr∆∞·ªõc ƒë√≥ c√≥ tr∆∞·ªùng h·ª£p WAF live detection ch·∫∑n, rule m·ªõi s·∫Ω t·ªìn t·∫°i ƒë·ªÉ ch·∫∑n t∆∞∆°ng t·ª± trong t∆∞∆°ng lai).

4) N·∫øu b·∫°n mu·ªën test nhi·ªÅu IP (kh√¥ng ph·∫£i localhost)

Analyzer m·∫∑c ƒë·ªãnh y√™u c·∫ßu THRESHOLD_IPS=2. Trong demo b·∫°n c√≥ th·ªÉ:

Gi·∫£m THRESHOLD_IPS=1 (ƒë√£ c√≥ trong DEMO_MODE) ‚Äî l√†m xong.

Ho·∫∑c g·ª≠i request t·ª´ c√°c m√°y/VM kh√°c ƒë·ªÉ c√≥ nhi·ªÅu src_ip kh√°c nhau.

5) L∆∞u √Ω / debug tips khi v·∫´n kh√¥ng th·∫•y rule t·∫°o

Ki·ªÉm tra logs/waf.log c√≥ d√≤ng JSON BLOCKED kh√¥ng (d·∫°ng {"timestamp":..., "event":"BLOCKED", "matched_rule": {...}}). Analyzer ch·ªâ ƒë·ªçc c√°c d√≤ng JSON. N·∫øu log ch·ªâ ch·ª©a human-readable lines (non-json), analyzer b·ªè qua.

Ki·ªÉm tra matched_rule c√≥ type v√† pattern kh√¥ng ‚Äî n·∫øu matched_rule thi·∫øu pattern, analyzer kh√¥ng th·ªÉ nh√≥m.

Ki·ªÉm tra rules.json c√≥ c·∫•u tr√∫c chu·∫©n JSON (c√≥ id,type,pattern) ‚Äî analyzer d√πng ƒë·ªÉ tr√°nh duplicate.

N·∫øu WAF ghi BLOCKED nh∆∞ng matched_rule ch·ª©a _re (Pattern object) thay v√¨ plain string, analyzer s·∫Ω kh√¥ng parse ‚Äî ƒë·∫£m b·∫£o b·∫°n l∆∞u matched_rule trong log l√† dict v·ªõi string fields. (Tr∆∞·ªùng h·ª£p tr∆∞·ªõc b·∫°n th·∫•y l·ªói Object of type Pattern is not JSON serializable ‚Äî ƒëi·ªÅu ƒë√≥ x·∫£y ra n·∫øu WAF c·ªë g·∫Øng json.dump(r) v·ªõi r["_re"] = compiled regex. Trong waf.py b·∫°n ƒëang log matched_rule: rule ‚Äî c·∫ßn ƒë·∫£m b·∫£o matched_rule kh√¥ng ch·ª©a tr∆∞·ªùng _re tr∆∞·ªõc khi vi·∫øt log.)

N·∫øu b·∫°n g·∫∑p l·ªói Object of type Pattern is not JSON serializable

S·ª≠a waf.py ·ªü ch·ªó append_json_log / t·∫°o matched_rule ‚Äî ƒë·ª´ng ghi to√†n b·ªô rule (v√¨ c√≥ _re). Ghi ch·ªâ nh·ªØng tr∆∞·ªùng c·∫ßn thi·∫øt:

append_json_log({
    "timestamp": timestamp,
    "event": "BLOCKED",
    "src_ip": src_ip,
    "url": url,
    "payload_snippet": content[:300],
    "matched_rule": {
        "id": rule.get("id"),
        "type": rule.get("type"),
        "pattern": rule.get("pattern"),
        "source": rule.get("source")
    }
})


(Trong b·∫£n b·∫°n c√≥ r·ªìi ‚Äî n·∫øu c√≤n l·ªói, ki·ªÉm tra n∆°i kh√°c b·∫°n c√≥ ghi nguy√™n rule m√† ch∆∞a l·ªçc _re.)

6) T√≥m t·∫Øt nhanh ‚Äî c√°c b∆∞·ªõc b·∫°n l√†m ngay b√¢y gi·ªù

Replace analyzer.py v·ªõi file demo t√¥i ƒë√£ post ·ªü ph·∫ßn 2 (DEMO_MODE = True).

Kh·ªüi ƒë·ªông waf.py, backend_app.py, admin_api.py.

T·ª´ m√°y dev (PowerShell / bash) g·ª≠i 2 l·∫ßn (DEMO) ho·∫∑c 3 l·∫ßn (prod config) payload b·ªã WAF ch·∫∑n, v√≠ d·ª•:

curl "http://127.0.0.1:5000/search?q=UNION+SELECT+password+FROM+users"


Ki·ªÉm tra logs/waf.log c√≥ d√≤ng JSON BLOCKED kh√¥ng.

Ch·∫°y python analyzer.py (ho·∫∑c click Run Analyzer tr√™n admin UI / POST /api/analyze).

M·ªü rules.json, ki·ªÉm tra rule m·ªõi.